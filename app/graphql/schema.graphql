type Axis {
  id: ID!
  name: String!
  subjects: [Subject!]!
}

enum BloomTaxonomy {
  analyze
  apply
  create
  evaluate
  remember
  understand
}

type Category {
  id: ID!
  name: String!
  subjects: [Subject!]!
}

enum Check {
  assertion_and_reason
  association
  constant_alternatives
  gap
  incomplete_affirmation
  interpretation
  multiple_answer
  negative_focus
  ordering_or_ranking
  unique_answer
}

"""
Autogenerated input type of CreateFeedback
"""
input CreateFeedbackInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  feedback: SendFeedback!
}

"""
Autogenerated return type of CreateFeedback
"""
type CreateFeedbackPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  feedback: ReviewFeedback
}

"""
Autogenerated input type of CreateQuestion
"""
input CreateQuestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  question: QuestionCreateInput!
}

"""
Autogenerated return type of CreateQuestion
"""
type CreateQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  question: Question
}

"""
Autogenerated input type of DestroyQuestion
"""
input DestroyQuestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  questionId: ID!
}

"""
Autogenerated return type of DestroyQuestion
"""
type DestroyQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deletedQuestionId: ID

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

enum Difficulty {
  easy
  hard
  medium
}

enum FeedbackStatus {
  approve
  comment
  request_change
}

"""
Autogenerated input type of FinishQuestion
"""
input FinishQuestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  questionId: ID!
}

"""
Autogenerated return type of FinishQuestion
"""
type FinishQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  question: Question
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  createFeedback(
    """
    Parameters for CreateFeedback
    """
    input: CreateFeedbackInput!
  ): CreateFeedbackPayload
  createQuestion(
    """
    Parameters for CreateQuestion
    """
    input: CreateQuestionInput!
  ): CreateQuestionPayload
  destroyQuestion(
    """
    Parameters for DestroyQuestion
    """
    input: DestroyQuestionInput!
  ): DestroyQuestionPayload
  finishQuestion(
    """
    Parameters for FinishQuestion
    """
    input: FinishQuestionInput!
  ): FinishQuestionPayload
  updateQuestion(
    """
    Parameters for UpdateQuestion
    """
    input: UpdateQuestionInput!
  ): UpdateQuestionPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  currentUser: User

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  questions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    where: QuestionWhereInput
  ): QuestionConnection!
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  subjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubjectConnection!
}

type Question implements Node {
  alternatives: [QuestionAlternative!]!
  authorshipYear: String
  bloomTaxonomy: BloomTaxonomy
  body: String
  checkType: Check
  createdAt: ISO8601DateTime!
  difficulty: Difficulty
  explanation: String
  id: ID!
  instruction: String
  references: String
  reviewFeedbacks: [ReviewFeedback!]!
  reviewRequests: [ReviewRequest!]!
  reviewer: User
  source: String
  status: Status
  subject: Subject
  support: String
  updatedAt: ISO8601DateTime!
  user: User!
}

type QuestionAlternative {
  correct: Boolean!
  text: String
}

input QuestionAlternativeInput {
  correct: Boolean
  text: String
}

"""
The connection type for Question.
"""
type QuestionConnection {
  """
  A list of edges.
  """
  edges: [QuestionEdge]

  """
  A list of nodes.
  """
  nodes: [Question]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

input QuestionCreateInput {
  alternatives: [QuestionAlternativeInput!]!
  authorshipYear: String!
  bloomTaxonomy: BloomTaxonomy
  body: String!
  checkType: Check
  difficulty: Difficulty
  explanation: String!
  instruction: String!
  references: String!
  reviewerUserId: ID
  source: String!
  status: Status!
  subjectId: ID
  support: String!
}

"""
An edge in a connection.
"""
type QuestionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Question
}

input QuestionUpdateInput {
  alternatives: [QuestionAlternativeInput!]!
  authorshipYear: String!
  bloomTaxonomy: BloomTaxonomy
  body: String!
  checkType: Check
  difficulty: Difficulty
  explanation: String!
  id: ID!
  instruction: String!
  references: String!
  reviewerUserId: ID
  source: String!
  status: Status!
  subjectId: ID
  support: String!
}

input QuestionWhereInput {
  authorshipYear: [String!]
  bloomTaxonomy: [BloomTaxonomy!]
  checkType: [Check!]
  difficulty: [Difficulty!]
  source: String
  status: [Status!]
  subjectId: ID
  userId: ID
}

type ReviewFeedback {
  comment: String
  createdAt: ISO8601DateTime!
  id: ID!
  status: FeedbackStatus!
  updatedAt: ISO8601DateTime!
  user: User!
}

type ReviewRequest {
  answered: Boolean!
  id: ID!
  question: Question!
  responses: [ReviewFeedback!]!
  user: User!
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

input SendFeedback {
  comment: String
  questionId: ID!
  status: FeedbackStatus
}

enum Status {
  approved
  draft
  finished
  pending
}

type Subject {
  axis: Axis!
  category: Category!
  id: ID!
  name: String!
  questions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    where: QuestionWhereInput
  ): QuestionConnection!
}

"""
The connection type for Subject.
"""
type SubjectConnection {
  """
  A list of edges.
  """
  edges: [SubjectEdge]

  """
  A list of nodes.
  """
  nodes: [Subject]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SubjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Subject
}

"""
Autogenerated input type of UpdateQuestion
"""
input UpdateQuestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  question: QuestionUpdateInput!
}

"""
Autogenerated return type of UpdateQuestion
"""
type UpdateQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  question: Question
}

type User {
  activeReviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection!
  avatarUrl: String
  email: String!
  id: ID!
  inactiveReviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection!
  name: String!
  roles: [UserRoles!]!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

enum UserRoles {
  admin
  center_director
  coordinator
  nde
  pro_rector
  teacher
}